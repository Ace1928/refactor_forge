# 🌀 Automatic Package Publishing and Version Management 🚀

name: Publish Package

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (format: X.Y.Z)'
        required: true
        default: ''
      dry_run:
        description: 'Dry run (no actual publishing)'
        required: true
        type: boolean
        default: false

jobs:
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # ⚡ Version Management - Automatic Source Update
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  update_version:
    name: Update Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      - name: Get version from input or release
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract version from release tag (remove v prefix if present)
            VERSION="${{ github.event.release.tag_name }}"
            VERSION=${VERSION#v}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version is ${VERSION}"
      
      - name: Run version update script
        run: |
          python tools/version_update.py ${{ steps.get_version.outputs.version }}
          
      - name: Commit and push version changes
        if: ${{ github.event_name != 'workflow_dispatch' || !github.event.inputs.dry_run }}
        run: |
          git config --global user.name "Eidos CI"
          git config --global user.email "syntheticeidos@gmail.com"
          git add -A
          git commit -m "🔖 Update version to ${{ steps.get_version.outputs.version }}"
          git push

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 📦 Build and Publish - Package Distribution
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  build_and_publish:
    name: Build and Publish
    needs: update_version
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || !github.event.inputs.dry_run }}
    
    steps:
      - name: Checkout code (with updated version)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check distribution
        run: |
          python -m twine check dist/*
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload dist/*

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 📋 Documentation - Update Release Notes
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  update_docs:
    name: Update Documentation
    needs: [update_version, build_and_publish]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || !github.event.inputs.dry_run }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
      
      - name: Update version badge in README
        run: |
          VERSION="${{ needs.update_version.outputs.version }}"
          sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+-blue/version-${VERSION}-blue/" README.md
      
      - name: Commit doc changes
        run: |
          git config --global user.name "Eidos CI"
          git config --global user.email "syntheticeidos@gmail.com"
          git add -A
          git commit -m "📚 Update documentation for release ${{ needs.update_version.outputs.version }}" || echo "No changes to commit"
          git push || echo "No changes to push"
